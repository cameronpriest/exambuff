package helper
{
	import com.adobe.serialization.json.JSON;
	
	import events.ServerDataEvent;
	
	import flash.events.Event;
	import flash.events.EventDispatcher;
	import flash.events.IOErrorEvent;
	import flash.net.URLLoader;
	import flash.net.URLRequest;
	
	/**
	 * Black box for loading saving and loading data from the server. 
	 * Handles all data conversion, sends errors to main error communicator
	 * and sends errors to objects that use it on a need to know basis:
	 * you asked me to do this, I can't, rather than I can't do this because X
	 * */
	public class ServerData extends EventDispatcher
	{
		
		public static const NOT_LOGGED_IN:String = 'NOT LOGGED IN';
		
		public function ServerData()
		{
		}
		/**
		 * Loads data from URL. Can be passed a complete URL request
		 * with additional variables: POST etc
		 * */
		public function load(url:String=null,request:URLRequest=null):void {
			if(!request) {
				request = new URLRequest(url);
			}
			var loader:URLLoader = new URLLoader();
			
			loader.addEventListener(IOErrorEvent.IO_ERROR,_catchIOError);
			loader.addEventListener(Event.COMPLETE,_readData);
			
			try {
				loader.load(request);		
			} catch (e:Error) {
				this._fail();
			}
		}		
		/**
		 * Reads JSON object loaded from server and
		 * dispatches the ServerDataEvent.LOADED event
		 * */
		protected function _readData(e:Event):void {
			var loader:URLLoader = URLLoader(e.target);	
			//trace('sd loaded '+loader.data);
			try {
				var decodedObj:Object = JSON.decode(loader.data);
			} catch (e:Error) {
				//trace('sd failed to decode '+e);
				this._fail();
				return;	
			}
			//trace('sd decoded successfully '+decodedObj);
			this.dispatchEvent(new ServerDataEvent(ServerDataEvent.LOADED,decodedObj));
		}		
		protected function _catchIOError(e:IOErrorEvent):void {		
			this._fail();
		}		
		/**
		 * Encodes an object in the way used to send to server
		 * */
		public static function encode(o:Object):String {
			return JSON.encode(o);			
		}
		/**
		 * Executes a URL request with data to save to server.
		 * */
		public function save(request:URLRequest):void {
			trace('SD saving to '+request.url);
			var loader:URLLoader = new URLLoader();
			
			loader.addEventListener(IOErrorEvent.IO_ERROR,_catchIOError);
			loader.addEventListener(Event.COMPLETE,_saveSuccess);
			try {
				loader.load(request);		
			} catch (e:Error) {
				trace('SD save error '+request.url);
				throw e;
			}
		}		
		/**
		 * Dispatched a SAVED event - if no IO Error was generated by save attempt
		 * */
		private function _saveSuccess(e:Event):void {
			
			var loader:URLLoader = URLLoader(e.target);	
			trace('SD save result '+loader.data);
			//trace('save successful: '+loader.data);
			try {
				var decodedObj:Object = JSON.decode(loader.data);
			} catch (e:Error) {
				//trace('sd failed to decode '+e);
				this._fail();
				return;	
			}
			//trace('sd decoded successfully '+decodedObj);
			this.dispatchEvent(new ServerDataEvent(ServerDataEvent.SAVED,decodedObj));
		}
		private function _fail():void {
			this.dispatchEvent(new ServerDataEvent(ServerDataEvent.FAILED));
		}
	}
}