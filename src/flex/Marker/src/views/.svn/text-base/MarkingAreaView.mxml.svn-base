<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:views="views.*" 
	width="100%"
	height="100%"
	verticalScrollPolicy="off"
	keyDown="{this.checkPanIconDown(event)}"
	keyUp="{this.checkPanIconUp(event)}"
	>
	<mx:Script>
		<![CDATA[
			
			import helper.Key;
			
			import models.Marks;
			import models.ScriptPages;
			
			import vo.CommentVO;
			
			import flash.events.MouseEvent;			
			
			import events.MarkingAreaEvent;
			import events.CommentViewEvent;
			import events.ScriptPagesEvent;
			
			import mx.events.CloseEvent;	
			import mx.events.FlexEvent;
			import mx.controls.Image;		
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			import mx.binding.utils.*;
			
			import mx.managers.CursorManager;
			
			[Bindable]
			public var scriptPages:ScriptPages;
			
			[Bindable]
			public var marks:Marks;
			
			[Bindable]
			public var currentComment:CommentVO;	
			
			[Bindable]
			public var currentPage:int;
			
			[Bindable]
			public var state:String;
			
			[Bindable]
			private var rotateEnabled:Boolean = true;
			
			private var _changingPage:Boolean = false;
			
			[Bindable]
			private var _lastPage:int;
			
			private var commentToClose:CommentVO;
			
			public static const VIEW_STATE:String = 'MAV_VIEW';
			public static const MARKING_STATE:String = 'MAV_MARKING';
			
			private const CLOSE_WARNING:String = 'You have entered a comment which will be lost if you close this comment. Do you want to continue?';
			private const CLOSE_TITLE:String = 'Are you sure you want to close this comment?';
			
			private var panning:Boolean;
			
			private var panCursor:Boolean = false;
			private var cursorID:int;
			
			[Bindable]
			[Embed(source='/../img/pan.png')]
			private var pan:Class;
				
			
			
			/**
			 * HAS to be called explicitly, or the view won't work: we need to know what
			 * state to start it in. Wait until the view has been created before running
			 * the _init function (would normally be run from creation_complete tag, but
			 * for the above reasons)
			 * */
			public function init(state:String):void {
				if(state!= MARKING_STATE&&state!=VIEW_STATE) throw new Error('MarkingAreaView needs a valid state on init');
				this.state = state;
				this.addEventListener(FlexEvent.CREATION_COMPLETE,_init);
			}			
			private function _init(e:Event):void {
				trace('mav creation complete init');
				Key.initialize(stage);
				// when the user clicks, addMarkingBox
				if(this.state === VIEW_STATE) {
					this.addEventListener(CommentViewEvent.RESTORE,_restoreHandler);		
					this.addEventListener(CommentViewEvent.CLOSE,_closeComment);		
					this.addEventListener(CommentViewEvent.DONE,_doneHandler);	
					stage.addEventListener(MouseEvent.MOUSE_UP,this.mouseUpHandler);
					
				} else {
					// this.pagesView.addEventListener(MouseEvent.MOUSE_DOWN,this.addMarkingBox);
					this.addEventListener(CommentViewEvent.RESTORE,_restoreHandler);		
					this.addEventListener(CommentViewEvent.CLOSE,_closeComment);		
					this.addEventListener(CommentViewEvent.DONE,_doneHandler);	
					this.addEventListener(CommentViewEvent.CONFIRMED,confirmedHandler);
					stage.addEventListener(MouseEvent.MOUSE_UP,this.mouseUpHandler);
				}		
				this.checkForComments();
			}	
			private function checkPanIconDown(e:KeyboardEvent):void {
				if(e.charCode !== 32) return;
				if(this.panCursor) return;
				this.cursorID = CursorManager.setCursor(pan);
				this.panCursor = true;
			}	
			private function checkPanIconUp(e:KeyboardEvent):void {
				if(e.charCode !== 32) return;
				if(this.panCursor) {
					CursorManager.removeCursor(this.cursorID);
					this.panCursor = false;
					return;
				}
			}		
			private function mouseUpHandler(e:MouseEvent):void {
				this.pagesView.dragStop();
			}	
			private function markingMouseDown(e:MouseEvent):void {
				stage.focus = this.pagesView;
				if(Key.isDown(32)) {
					this.pagesView.dragStart();
					this.boxes.dragStart(e);
					return;
				}
				this.boxes.mouseDown(e);
			}
			/**
			 * Handles a msg from user to restore a comment by moving the comment up the layers, and
			 * dispatching a MarkingArea level focus change for that comment, so all parts of the view
			 * can update themselves
			 * */
			 private function _restoreHandler(event:CommentViewEvent):void {
			 	var restore:DisplayObject = DisplayObject(event.target);
			 	// don't try swapChildren - Canvases don't like it for some reason, so do it explicitly
			 	this.dispatchEvent(new MarkingAreaEvent(MarkingAreaEvent.HAS_FOCUS,event.comment));
			 	if(this.marks.page(this.currentPage).comments.length !== 0) this.rotateEnabled = false;
			}
			/**
			 * When a new comment view has been confirmed as legal and attached to view, store it in the model
			 * */
			private function confirmedHandler(cve:CommentViewEvent):void {
				// only catch when bubbles up to here
				if(cve.currentTarget!=this) return;
				trace('caught confirmed for '+cve.comment);
			 	this.marks.addComment(cve.comment,this.currentPage);
			 	this.rotateEnabled = false;
			 }
			/**
			 * Handles user stating comment is 
			 * */
			private function _doneHandler(e:CommentViewEvent):void {
				this.dispatchEvent(new MarkingAreaEvent(MarkingAreaEvent.DONE,e.comment));
			}
			/**
			 * Dispatches a MarkingArea level close event for that
			 * comment, so all parts of the view can update themselves
			 * */
			private function _closeComment(cve:CommentViewEvent):void {
				if(this._commentHasDataNeedsConfirmation(cve.comment)) {
					this.commentToClose = cve.comment;
					var alert:Alert = Alert.show(this.CLOSE_WARNING,
																this.CLOSE_TITLE,Alert.YES | Alert.NO,
																this,
																this._confirmOrCancleClose);
					PopUpManager.centerPopUp(alert);
				} else {
					this.marks.removeComment(cve.comment,this.currentPage);
					this.dispatchEvent(new MarkingAreaEvent(MarkingAreaEvent.CLOSE,cve.comment));
				}
				this.checkForComments();
			}
			/**
			 * Is there any data loss if the comment is closed?
			 * */
			private function _commentHasDataNeedsConfirmation(comment:CommentVO):Boolean {
				if(comment.empty())	return false;
				return true;
			}
			/**
			 * Handles a msg from user to close a comment - doesn't dispatch due to work-around below
			 * 
			 * The return anonymous function is required so the event handler can take an additonal parameter,
			 * removing the need to store and retrieve which comment asked for the close
			 * */
			private function _confirmOrCancleClose(event:CloseEvent):void {
				if(event.detail === Alert.YES) {
					this.marks.removeComment(this.commentToClose,this.currentPage);
					this.dispatchEvent(new MarkingAreaEvent(MarkingAreaEvent.CLOSE,this.commentToClose));
				}
			}
			/**
			 * Page forward
			 * */
			 private function _pageForward(e:MouseEvent):void {		
			 	if(!this._changingPage) {	 
			 		this._changingPage = true;	
				 	this.scriptPages.addEventListener(ScriptPagesEvent.PAGE_LOADED,_changedForward);
				 	this.scriptPages.loadPage(this.marks.script,this.currentPage+1);
				 	
			 	}
			 }
			 /**
			 * Page forward
			 * */
			 private function _pageBack(e:MouseEvent):void {
			 	if(!this._changingPage) {	 	
			 		this._changingPage = true;	
				 	this.scriptPages.addEventListener(ScriptPagesEvent.PAGE_LOADED,_changedBack);
				 	this.scriptPages.loadPage(this.marks.script,this.currentPage-1);
				 }
			 }
			 /**
			 * Move view to new page
			 * */
			 private function _changedForward(e:ScriptPagesEvent):void {
			 	this.scriptPages.removeEventListener(ScriptPagesEvent.PAGE_LOADED,_changedForward);
				this.currentPage++;		
				this._changingPage = false;	
				this.checkForComments();	 	
			 }
			 	 /**
			 * Move view to new page
			 * */
			 private function _changedBack(e:ScriptPagesEvent):void {
			 	this.scriptPages.removeEventListener(ScriptPagesEvent.PAGE_LOADED,_changedBack);
			 	this.currentPage--;
			 	this._changingPage = false;	
			 	this.checkForComments();
			 }
			/**
			 * At first?
			 * */
			 private function _atFirst():Boolean {
			 	 var r:Boolean;
			 	this.currentPage !== 0 ? r = true : r=  false;
			 	return r;
			 }
			 	/**
			 * At last?
			 * */
			 private function _atLast():Boolean {
			 	var r:Boolean;
			 	//this.currentPage !== this._marks.pages.length ? r = true : r=  false;
			 	return r;
			 }
			 private function _rotateRight(e:Event):void {
			 	this.marks.page(this.currentPage).rotateRight();
			 	this.pagesView.rotateRight()
			 }
			  private function _rotateLeft(e:Event):void {
			  	this.marks.page(this.currentPage).rotateLeft();
			 	this.pagesView.rotateLeft();
			 }
			 public function set lastPage(lp:int):void {
			 	trace('setting lp:'+lp);
			 	this._lastPage = lp;
			 }
			 private function _notFirstPage(cp:int):Boolean {
			 	if(this.currentPage !== 0) {
			 		return true;
			 	}
			 	return false;
			 }
			 private function _notLastPage(cp:int,lp:int):Boolean {
			 	if(this.currentPage !== this._lastPage - 1) {
			 		return true;
			 	}
			 	return false;
			 }
			 private function _finishMarking():void {
			 	this.commentMarking.updateComment();
			 	this.dispatchEvent(new MarkingAreaEvent(MarkingAreaEvent.FINISHED));
			 }
			 private function checkForComments():void {
			 	this.marks.page(this.currentPage).comments.length === 0 ? this.rotateEnabled =true:this.rotateEnabled=false;
			 }
		]]>
	</mx:Script>
		<mx:Canvas width="100%" height="100%" id="appBarControls" >
			<mx:HBox bottom="0" left="0">
				<mx:Button label="Rotate Left" enabled="{this.rotateEnabled}" click="_rotateLeft(event)" visible="{this.state==MARKING_STATE?true:false}" focusEnabled="false"/>	
				<mx:Button label="Rotate Right" enabled="{this.rotateEnabled}" click="_rotateRight(event)" visible="{this.state==MARKING_STATE?true:false}" focusEnabled="false" />
			</mx:HBox>
			<mx:HBox bottom="0" right="0">
					<mx:Button label="Finish and enter mark" right="0" click="_finishMarking()" visible="{this.state==MARKING_STATE?true:false}" focusEnabled="false"/>
			</mx:HBox>
		</mx:Canvas>
		
		<mx:HBox width="100%" height="100%" >
		<!-- this is the main marking view, with inline marking below, and comment text entry below that -->
			<mx:Panel title="{this.state===MarkingAreaView.MARKING_STATE?'Marking':'Viewing'} page {this.currentPage+1} of {this._lastPage}"
				id="inlineMarking" width="76%" height="100%" layout="absolute" horizontalScrollPolicy="off" verticalScrollPolicy="off">
				<mx:Button height="100%" left="0" width="5%"
					label="Last" enabled="{_notFirstPage(this.currentPage)}" click="_pageBack(event)" focusEnabled="false"/>				
				<mx:Canvas horizontalCenter="0" width="89.5%" height="100%"> 
					<mx:Canvas id="marking" 
							   top="0" bottom="0" left="0" right="0" 
							   mouseDown="{this.markingMouseDown(event)}" 
							   mask="{this.maskCanvas}">
						<views:PagesView id="pagesView" 
									 width="100%" height="100%"
									 scriptPages="{this.scriptPages}" 
									 currentPage="{this.currentPage}"
									 marks="{this.marks}"
									 toolTip="Click and drag around an area of text you wish to comment on. Release the mouse button when the highlighting box is the right size, and the comment box will appear" />
						<views:MarkingBoxes id="boxes" width="100%" height="100%"   horizontalScrollPolicy="off" verticalScrollPolicy="off"
								marks="{this.marks}"
								markingView="{this}"
								pagesView="{this.pagesView}"
								pageOffset="{this.pagesView.pageOffset}"
								state="{this.state}"
								creationComplete="trace(this.marking.getChildIndex(this.boxes))"/>
					</mx:Canvas>	
					<mx:Canvas id="maskCanvas" backgroundColor="#FF0000" width="100%" height="100%" />
				</mx:Canvas>
				<mx:Button label="Next" height="100%" width="5%" right="0" click="_pageForward(event)" enabled="{_notLastPage(this.currentPage,this._lastPage)}" />
			</mx:Panel>
			<views:SideMarking height="100%" width="24%" id="commentMarking" 
				marks="{this.marks}"
				markingView="{this}" 
				currentPage="{this.currentPage}" 
				state="{this.state}"/>
		</mx:HBox>
</mx:Canvas>
