<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	 mouseDown="mouseDown(event)"
	  creationComplete="_init()">
	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.binding.utils.BindingUtils;
			import models.Marks;
			
			import events.CommentViewEvent;
			import events.MarkingAreaEvent;
			
			import helper.Key;
			
			import vo.CommentVO;
			
			[Bindable]
			public var marks:Marks;
			[Bindable]
			public var markingView:MarkingAreaView;
			[Bindable]
			public var pagesView:PagesView;
			
			[Bindable]
			public var pageOffset:Point;

			[Bindable]
			public var state:String;
			
			private function _init():void {
				//trace('mb _init');
				this.pagesView.addEventListener(PagesView.PAGE_SET_UP,this.loadBoxes);
				this.addEventListener(CommentViewEvent.RESTORE,this.restoreBox);
				this.loadBoxes();
			}
			
			/*
			* Public facing functions
			*/
			public function mouseDown(e:MouseEvent):void {
				if(this.state === MarkingAreaView.VIEW_STATE) return;
				if(Key.isDown(32)) return;
				if(!(e.target is MarkingBoxes)) return;
				if(e.currentTarget !== this) return;
				var b:MarkingBoxView = new MarkingBoxView(this.markingView,this,null);
				BindingUtils.bindProperty(b,"pageOffset",this,"pageOffset"); 
				this.addChild(b); //new view 				
			}
			public function dragStart(event:MouseEvent):void {
				stage.addEventListener(MouseEvent.MOUSE_UP,this.dragStop);
				for each(var mb:MarkingBoxView in this.getChildren()) {
					mb.dragStart(event);
				}
			}
			/*
			* Internal functions
			**/
			private function dragStop(e:MouseEvent):void {
				stage.removeEventListener(MouseEvent.MOUSE_UP,this.dragStop);
				for each(var mb:MarkingBoxView in this.getChildren()) {
					mb.dragStop();
				}
				//trace('mb pageOffset '+this.pageOffset);
			}
			/**
			 * Loads boxes from the CommentVOs in a ScriptPage in Marks. Injects marking view and
			 * CommentVO
			 **/
			private function loadBoxes(e:Event = null):void {
				//trace('heard pages view set up');
			 	for each(var box:MarkingBoxView in this.getChildren()) {
			 		box.close();
			 	}
				var commentArray:Array = this.marks.page(this.pagesView.currentPage).comments;
				//trace('comments loaded:'+commentArray.length);
				var i:int = 0;
			 	for each(var comment:CommentVO in commentArray) {
			 		var newMBView:MarkingBoxView = new MarkingBoxView(this.markingView,this,comment); //new view
			 		BindingUtils.bindProperty(newMBView,"pageOffset",this,"pageOffset");
					this.addChild(newMBView); // place it on the display list via this, parent, view		
					i++;
					if(i==commentArray.length) {
						newMBView.addEventListener(MarkingBoxView.SET_UP,this.makeLastBoxActive);
					}
			 	}
			}
			private function makeLastBoxActive(e:Event):void {
				//trace('make last box active');
				var comment:CommentVO;
				var comArray:Array =  this.marks.page(this.pagesView.currentPage).comments;
				comment = comArray[comArray.length-1];
				this.dispatchEvent(new CommentViewEvent(CommentViewEvent.RESTORE,comment));
			}
			private function restoreBox(e:CommentViewEvent):void {
				if(e.target is MarkingBoxView) {
					var box:MarkingBoxView = MarkingBoxView(e.target)
					this.removeChild(box);
					this.addChild(box);
				}
			}
		]]>
	</mx:Script>
</mx:Canvas>
