<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="200" 
	visible="true" 
	label="Comment #"
	preinitialize="_preinitialize(event)"		
	showCloseButton="true"
	title="Comment"
	>
	<mx:VBox>			
		<mx:ComboBox creationComplete="_loadCombo(event)" id="commentTypeBox" change="_comboChange(event)">	
			<mx:ArrayCollection>
				<mx:Object label="Argument" />
				<mx:Object label="Use of evidence" />
				<mx:Object label="Structure" />
				<mx:Object label="Style" />
				<mx:Object label="Relevence" />
			</mx:ArrayCollection>
		</mx:ComboBox>	
		<mx:TextArea id="commentTextArea" height="220" preinitialize="{this._textBoxPreinit(event)}">
			
		</mx:TextArea>
		<mx:Button label="Done" click="_done()">
			
		</mx:Button>
	</mx:VBox>		
	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.events.CloseEvent;
			import events.CommentViewEvent;
			import events.MarkingAreaEvent;
			
			import vo.CommentVO;
			
			import mx.binding.utils.*;
			
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			
			private const CLOSE_WARNING:String = 'You have entered a comment which will be lost if you close this comment. Do you want to continue?';
			private const CLOSE_TITLE:String = 'Are you sure you want to close this comment?';
			
			private var _markingArea:MarkingAreaView;		
			
			// the value object shared with marking box view, and the two values that are bound 
			// to this part of the view
			[Bindable]
			public var _VO:CommentVO;
			
			private function _textBoxPreinit(e:Event):void {
				if (this._VO.commentText != null) {
					this.commentTextArea.text = this._VO.commentText;
				}
				BindingUtils.bindProperty(this._VO,'commentText',this.commentTextArea,'text');
			}				
			/**
			 * Called by other objects as a constructor replacement
			 * */
			public function init(markingBox:MarkingBoxView,markingArea:MarkingAreaView,VO:CommentVO):void {	
				this._VO = VO;
				this._registerMarkingBox(markingBox);	
				this._markingArea = markingArea;
				this._markingArea.addEventListener(MarkingAreaEvent.HAS_FOCUS,this._focusChangeHandler);
				this._markingArea.addEventListener(MarkingAreaEvent.CLOSE,this._closeHandler);
				this._markingArea.addEventListener(MarkingAreaEvent.DONE,this._doneHandler);
				this.addEventListener(CloseEvent.CLOSE,this._closeRequest);
			}
			/**
			 * Set up data bindings in preinit, as required
			 * */
			public function _preinitialize(event:Event):void {
				// set up event handlers for user events					
				this.addEventListener(FocusEvent.FOCUS_IN,this._gotFocusHandler,false,0,true);
			}
			/**
			 * make sure we know which marking box this comment needs to listen to etc
			 * */
			public function _registerMarkingBox(markingBox:MarkingBoxView):void {
				this.x = markingBox.x +markingBox.width + 25;
				this.y = markingBox.y;
			}
			/**
			 * Communicate a close request
			 * */
			private function _closeRequest(event:CloseEvent):void {					
			/**
			 * Checks whether the close requester has any data that might be lost on a mistake. If it does, 
			 * it shows a popup. If not, it immediately dispatches a MarkingArea event on the comment VO
			 * */
				if(this._commentHasDataNeedsConfirmation()) {
					var alert:Alert = Alert.show(this.CLOSE_WARNING,
																this.CLOSE_TITLE,Alert.YES | Alert.NO,
																this._markingArea,
																this._confirmOrCancleClose);
					PopUpManager.centerPopUp(alert);
				} else {
					this.dispatchEvent(new CommentViewEvent(CommentViewEvent.CLOSE,this._VO));
				}
			}
			private function _commentHasDataNeedsConfirmation():Boolean {
				if(this._VO.commentText != '') {
					return true;
				}
				return false;
			}
			/**
			 * Handles a msg from user to close a comment - doesn't dispatch due to work-around below
			 * 
			 * The return anonymous function is required so the event handler can take an additonal parameter,
			 * removing the need to store and retrieve which comment asked for the close
			 * */
			private function _confirmOrCancleClose(event:CloseEvent):void {
				if(event.detail === Alert.YES) {
					this.dispatchEvent(new CommentViewEvent(CommentViewEvent.CLOSE,this._VO));
				}
			}
			/**
			 * Communicate a focus change request
			 * */
			private function _gotFocusHandler(event:FocusEvent):void {
				var msg:CommentViewEvent = new CommentViewEvent(CommentViewEvent.RESTORE,this._VO);
				this.dispatchEvent(msg);
			}		
			
			/**
			 * On receipt of a change focus message, if this box doesn't have focus, hide it
			 * */
			private function _focusChangeHandler(event:MarkingAreaEvent):void {			
				if(event.comment != this._VO) {
					this.visible = false;
					return;
				} 
				this.visible = true;										
			}			
			
			private function _closeHandler(e:MarkingAreaEvent):void {
				if(e.comment === this._VO) {
					this._close();
				}
			}
 			private function _close():void {
 				this.parent.removeChild(this);
 				this._markingArea.removeEventListener(MarkingAreaEvent.HAS_FOCUS,this._focusChangeHandler);
				this._markingArea.removeEventListener(MarkingAreaEvent.CLOSE,this._closeHandler);
				this.removeEventListener(CloseEvent.CLOSE,this._closeRequest);
 			}
 			/**
 			 * Called when user clicks 'Done'
 			 * */
 			 private function _done():void {
 			 	this.dispatchEvent(new CommentViewEvent(CommentViewEvent.DONE));
 			 }
 			 private function _doneHandler(e:MarkingAreaEvent):void {
 			 	this.visible = false;
 			 }
 			 private function _loadCombo(e:Event):void {
 			 	if(this._VO.commentType) {
					for (var i: int = 0; i < commentTypeBox.dataProvider.length; i++) {
					  if ( this._VO.commentType == commentTypeBox.dataProvider[i].label) {
					    commentTypeBox.selectedIndex = i;
					    break;
					  }    
					}
	 			 } else {
	 			 	// commentVO hasn't been set yet - if we don't set it to default, we'll save
	 			 	// a null if the marker doesn't change the box
	 			 	this._VO.commentType = 'Argument';
	 			 }
 			 }
 			 private function _comboChange(e:Event):void {
 			 	this._VO.commentType = commentTypeBox.selectedLabel;
 			 }
		]]>
	</mx:Script>
</mx:TitleWindow>