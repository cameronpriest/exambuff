<?xml version="1.0" encoding="utf-8"?>
<mx:Image xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="init()">
	<mx:Script>
		<![CDATA[
			import mx.events.MoveEvent;
			import states.ImagePreparerState;
			import models.ImagePreparerPM;
			import mx.controls.Alert;
			import flash.geom.Matrix;
			import fl.motion.MatrixTransformer;
			
			import helper.MouseAngle;
					
			[Bindable]
			public var presentationModel:ImagePreparerPM;
			
			[Bindable]
			public var parentObj:DisplayObject;
			
			private var _bmd:BitmapData;
			private var _img:Bitmap;
			private var _imageCentre:Point;
			private var _initCentre:Point;
					
			public function init():void {			
				presentationModel.addEventListener(Event.CHANGE,this.loadImg);
			}
			public function loadImg(e:Event):void {					
				var bmd:BitmapData = 	this.presentationModel.BMD;
				this._img = new Bitmap(bmd);
				this._img.addEventListener(Event.ADDED_TO_STAGE,_setUp);
				
				this.addChild(this._img);		
				this._initImg();				
			}			
			private function _setUp(e:Event):void {
				var imgCentre:Point = new Point(this._img.width/2,this._img.height/2);
				var globXY:Point = this._img.localToGlobal(imgCentre);
				this._imageCentre = globXY;
				this._initCentre = imgCentre;
				//trace(globXY);
				
				// inform pres model of new image centre - needs to come b4 setting default state to rotate, as this state
				// requires centre info
				this.presentationModel.imageCentre = globXY;
				this.presentationModel.state = ImagePreparerPM.ROTATE;
			}
			private function _initImg():void {				
				this.addEventListener(MouseEvent.MOUSE_DOWN,this._mouseDown);
				stage.addEventListener(MouseEvent.MOUSE_UP,this._mouseUp);	
			}
			private function _mouseDown(e:MouseEvent):void {				
				presentationModel.mouseDown(e);				
				stage.addEventListener(MouseEvent.MOUSE_MOVE,presentationModel.mouseMove);
				if(presentationModel.state == ImagePreparerPM.CROP) {
					stage.addEventListener(MouseEvent.MOUSE_MOVE,this._crop);
				} else if (presentationModel.state == ImagePreparerPM.ROTATE) {
					stage.addEventListener(MouseEvent.MOUSE_MOVE,this._rotate);					
				}				
			}
			private function _mouseUp(e:MouseEvent):void {				
				stage.removeEventListener(MouseEvent.MOUSE_MOVE,presentationModel.mouseMove);
				stage.removeEventListener(MouseEvent.MOUSE_MOVE,this._rotate);								
			}
			private function _rotate(e:MouseEvent):void {
				
				var r2d:Number = MouseAngle.rad2Deg(presentationModel.rotationRad);
				var m:Matrix = this._img.transform.matrix;				
				MatrixTransformer.rotateAroundExternalPoint(m,this._initCentre.x,this._initCentre.y,r2d);
				this._img.transform.matrix = m;						
			}	
			/*
			private function _rotate(e:MouseEvent):void {				
				var imageCentre:Point = this._imageCentre;				
				var m:Matrix = this._img.transform.matrix;
		
				this._rotateExternal(m,imageCentre,presentationModel.rotationRad);		
				this._img.transform.matrix = m;						
			
			}
					
			private function _rotateExternal(m:Matrix,p:Point,d:Number):void {
				m.translate(-p.x,-p.y);
				m.rotate(d);
				m.translate(p.x,p.y);
			}
			*/
			private function _crop():void {
				
			}	
		]]>
	</mx:Script>
</mx:Image>
